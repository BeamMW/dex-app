Index: src/app/core/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const MIN_AMOUNT = 0.00000001;\r\nconst MAX_AMOUNT = 254000000;\r\n\r\nlet BEAM = null;\r\nlet CallID = 0;\r\nconst Calls = {};\r\nlet APIResCB;\r\nconst ipfsGateway = 'https://gallery20.apps.beam.mw/ipfs/';\r\nconst webGateway = 'https://gallery20.apps.beam.mw/cache/';\r\n// const headlessNode = 'eu-node02.dappnet.beam.mw:8200';\r\nconst headlessNode = 'eu-node01.mainnet.beam.mw:8200';\r\nlet InitParams;\r\n\r\nexport default class Utils {\r\n  static is_desktop = undefined;\r\n\r\n  static is_mobile = undefined;\r\n\r\n  static is_android = undefined;\r\n\r\n  static is_web = undefined;\r\n\r\n  static is_chrome = undefined;\r\n\r\n  static get ipfsGateway() {\r\n    return ipfsGateway;\r\n  }\r\n\r\n  static get webGateway() {\r\n    return webGateway;\r\n  }\r\n\r\n  static isMobile() {\r\n    if (Utils.is_mobile === undefined) {\r\n      const ua = navigator.userAgent;\r\n      Utils.is_mobile = (/android/i.test(ua) || /iPad|iPhone|iPod/.test(ua));\r\n    }\r\n    return Utils.is_mobile;\r\n  }\r\n\r\n  static isCompact() {\r\n    return Utils.isMobile();\r\n  }\r\n\r\n  static isDesktop() {\r\n    if (Utils.is_desktop === undefined) {\r\n      const ua = navigator.userAgent;\r\n      Utils.is_desktop = (/QtWebEngine/i.test(ua));\r\n    }\r\n    return Utils.is_desktop;\r\n  }\r\n\r\n  static isWeb() {\r\n    if (Utils.is_web === undefined) {\r\n      Utils.is_web = (!Utils.isDesktop() && !Utils.isMobile());\r\n    }\r\n    return Utils.is_web;\r\n  }\r\n\r\n  static isAndroid() {\r\n    if (Utils.is_android === undefined) {\r\n      const ua = navigator.userAgent;\r\n      Utils.is_android = (/android/i.test(ua));\r\n    }\r\n    return Utils.is_android;\r\n  }\r\n\r\n  static isChrome() {\r\n    if (Utils.is_chrome === undefined) {\r\n      const ua = navigator.userAgent;\r\n      Utils.is_chrome = (/chrome|chromium|crios/i.test(ua) && ua.indexOf('Edg') == -1);\r\n    }\r\n    return Utils.is_chrome;\r\n  }\r\n\r\n  static isHeadless() {\r\n    return BEAM && BEAM.headless;\r\n  }\r\n\r\n  static async createMobileAPI(apirescback) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!window.BEAM) {\r\n        return reject();\r\n      }\r\n      if (Utils.isAndroid()) {\r\n        document.addEventListener('onCallWalletApiResult', (res) => apirescback(res.detail));\r\n      } else {\r\n        window.BEAM.callWalletApiResult(apirescback);\r\n      }\r\n      resolve({\r\n        api: window.BEAM,\r\n      });\r\n    });\r\n  }\r\n\r\n  static async createDesktopAPI(apirescback) {\r\n    await Utils.injectScript('qrc:///qtwebchannel/qwebchannel.js');\r\n    return new Promise((resolve) => {\r\n      new QWebChannel(qt.webChannelTransport, (channel) => { // eslint-disable-line no-undef\r\n        channel.objects.BEAM.api.callWalletApiResult.connect(apirescback);\r\n        resolve({\r\n          api: channel.objects.BEAM.api,\r\n          styles: channel.objects.BEAM.style,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  static async createWebAPI(apiver, apivermin, appname, apirescback) {\r\n    return new Promise((resolve) => {\r\n      window.addEventListener('message', async (ev) => {\r\n        if (ev.data === 'apiInjected') {\r\n          await window.BeamApi.callWalletApiResult(apirescback);\r\n          resolve({\r\n            api: window.BeamApi,\r\n          });\r\n        }\r\n      }, false);\r\n      window.postMessage({\r\n        type: 'create_beam_api', apiver, apivermin, appname,\r\n      }, window.origin);\r\n    });\r\n  }\r\n\r\n  static async createHeadlessAPI(apiver, apivermin, appname, apirescback) {\r\n    await Utils.injectScript('wasm-client.js');\r\n\r\n    const WasmModule = await BeamModule(); // eslint-disable-line no-undef\r\n    const { WasmWalletClient } = WasmModule;\r\n    const client = new WasmWalletClient(headlessNode, WasmModule.Network.mainnet);\r\n    client.startWallet();\r\n\r\n    client.subscribe((response) => {\r\n      throw new Error(`Unexpected wasm wallet client response call: ${response}`);\r\n    });\r\n\r\n    client.setApproveContractInfoHandler((info) => {\r\n      throw new Error(`Unexpected wasm wallet client transaction in headless wallet ${info}`);\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const appid = WasmWalletClient.GenerateAppID(appname, window.location.href);\r\n      client.createAppAPI(apiver, apivermin, appid, appname, (err, api) => {\r\n        if (err) {\r\n          reject(err);\r\n        }\r\n\r\n        api.setHandler(apirescback);\r\n        resolve({\r\n          headless: true,\r\n          module: WasmModule,\r\n          factory: WasmWalletClient,\r\n          client,\r\n          appid,\r\n          api,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  static async stopHeadlessWallet() {\r\n    return new Promise((resolve, reject) => {\r\n      BEAM.client.stopWallet((data) => {\r\n        const running = BEAM.client.isRunning();\r\n        console.log(`is running: ${BEAM.client.isRunning()}`);\r\n        console.log('wallet stopped:', data);\r\n\r\n        if (running) {\r\n          reject(false);\r\n        } else {\r\n          resolve(true);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  static async switchToWebAPI() {\r\n    if (!Utils.isHeadless()) {\r\n      throw new Error('Wallet must be opened in a headless mode');\r\n    }\r\n\r\n    const apiver = InitParams.api_version || 'current';\r\n    const apivermin = InitParams.min_api_version || '';\r\n    const { appname } = InitParams;\r\n    const apirescb = (...args) => Utils.handleApiResult(...args);\r\n\r\n    const newAPI = await new Promise((resolve) => {\r\n      const listener = async (ev) => {\r\n        if (ev.data === 'apiInjected') {\r\n          await window.BeamApi.callWalletApiResult(apirescb);\r\n          Utils.hideLoading();\r\n          resolve(window.BeamApi);\r\n        }\r\n\r\n        if (ev.data === 'rejected') {\r\n          // TODO\r\n        }\r\n      };\r\n\r\n      // TODO: add some delay before showing connecting message\r\n      //       if extension is installed and app is allowed it would filck\r\n      window.addEventListener('message', listener, false);\r\n      Utils.showLoading({\r\n        headless: true,\r\n        connecting: true,\r\n        onCancel: (res) => {\r\n          Utils.hideLoading();\r\n          window.removeEventListener('message', listener);\r\n          // TODO: add cancel handling in wallet\r\n          window.postMessage({\r\n            type: 'cancel_beam_api', apiver, apivermin, appname,\r\n          }, window.origin);\r\n          resolve(res);\r\n        },\r\n        onReconnect: () => {\r\n          window.postMessage({\r\n            type: 'retry_beam_api', apiver, apivermin, appname,\r\n          }, window.origin);\r\n        },\r\n      });\r\n      window.postMessage({\r\n        type: 'create_beam_api', apiver, apivermin, appname,\r\n      }, window.origin);\r\n    });\r\n\r\n    if (newAPI) {\r\n      BEAM.api.delete();\r\n      await Utils.stopHeadlessWallet();\r\n      BEAM = {\r\n        api: newAPI,\r\n      };\r\n    }\r\n\r\n    return newAPI;\r\n  }\r\n\r\n  static async callApiAsync(method, params) {\r\n    return new Promise((resolve, reject) => {\r\n      Utils.callApi(method, params, (err, res, full) => {\r\n        if (err) return reject(err);\r\n        return resolve({ res, full });\r\n      });\r\n    });\r\n  }\r\n\r\n  static async callApi(method, params, cback) {\r\n    const callid = ['call', CallID++, method].join('-');\r\n    const request = {\r\n      jsonrpc: '2.0',\r\n      id: callid,\r\n      method,\r\n      params,\r\n    };\r\n    Calls[callid] = { cback, request };\r\n    console.log('REQQQ');\r\n    console.log(Utils.formatJSON(request));\r\n\r\n    if (Utils.isHeadless()) {\r\n      return BEAM.api.callWalletApi(JSON.stringify(request));\r\n    }\r\n\r\n    if (Utils.isWeb()) {\r\n      return BEAM.api.callWalletApi(callid, method, params);\r\n    }\r\n\r\n    if (Utils.isMobile()) {\r\n      return BEAM.api.callWalletApi(JSON.stringify(request));\r\n    }\r\n\r\n    if (Utils.isDesktop()) {\r\n      return BEAM.api.callWalletApi(JSON.stringify(request));\r\n    }\r\n  }\r\n\r\n  static async invokeContractAsync(args, bytes) {\r\n    return new Promise((resolve, reject) => {\r\n      Utils.invokeContract(args, (err, res, full, request) => {\r\n        if (err) return reject(err);\r\n        return resolve({ res, full, request });\r\n      },\r\n      bytes);\r\n    });\r\n  }\r\n\r\n  static download(url, cback) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        if (xhr.status === 200) {\r\n          const buffer = xhr.response;\r\n          const byteArray = new Uint8Array(buffer);\r\n          const array = Array.from(byteArray);\r\n\r\n          if (!array || !array.length) {\r\n            return cback('empty shader');\r\n          }\r\n\r\n          return cback(null, array);\r\n        }\r\n        const errMsg = ['code', xhr.status].join(' ');\r\n        return cback(errMsg);\r\n      }\r\n    };\r\n    xhr.open('GET', url, true);\r\n    xhr.responseType = 'arraybuffer';\r\n    xhr.send(null);\r\n  }\r\n\r\n  static async invokeContractAsyncAndMakeTx(args) {\r\n    const { full } = await Utils.invokeContractAsync(args);\r\n    Utils.ensureField(full.result, 'raw_data', 'array');\r\n\r\n    try {\r\n      const { res } = await Utils.callApiAsync('process_invoke_data', { data: full.result.raw_data });\r\n      Utils.ensureField(res, 'txid', 'string');\r\n      return res.txid;\r\n    } catch (err) {\r\n      if (Utils.isUserCancelled(err)) {\r\n        return undefined;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static invokeContract(args, cback, bytes) {\r\n    let params = {\r\n      create_tx: false,\r\n    };\r\n\r\n    if (args) {\r\n      let assign = args;\r\n\r\n      if (typeof args === 'object') {\r\n        assign = '';\r\n        for (const key in args) {\r\n          assign += `${(assign ? ',' : '') + key}=${args[key]}`;\r\n        }\r\n      }\r\n\r\n      params = { args: assign, ...params };\r\n    }\r\n\r\n    if (bytes) {\r\n      params = { contract: bytes, ...params };\r\n    }\r\n\r\n    console.log('invoke contract', params);\r\n    return Utils.callApi('invoke_contract', params, cback);\r\n  }\r\n\r\n  static handleApiResult(json) {\r\n    let answer;\r\n\r\n    try {\r\n      answer = JSON.parse(json);\r\n      const { id } = answer;\r\n      const call = Calls[id] || {};\r\n      const cback = call.cback || APIResCB;\r\n      const { request } = call;\r\n      delete Calls[id];\r\n      console.log('AnswerUtils');\r\n      console.log(answer);\r\n      if (answer.error) {\r\n        return cback(answer);\r\n      }\r\n\r\n      if (typeof answer.result === 'undefined') {\r\n        return cback({\r\n          error: 'no valid api call result',\r\n          answer,\r\n        });\r\n      }\r\n\r\n      if (typeof answer.result.output === 'string') {\r\n        // this is shader result\r\n        const shaderAnswer = JSON.parse(answer.result.output);\r\n        if (shaderAnswer.error) {\r\n          return cback({\r\n            error: shaderAnswer.error,\r\n            answer,\r\n            request,\r\n          });\r\n        }\r\n        return cback(null, shaderAnswer, answer, request);\r\n      }\r\n      console.log('Api result: ', request);\r\n      console.log('Api result: ', answer);\r\n      return cback(null, answer.result, answer, request);\r\n    } catch (err) {\r\n      APIResCB({\r\n        error: err.toString(),\r\n        answer: answer || json,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async initialize(params, initcback) {\r\n    InitParams = params;\r\n    APIResCB = params.apiResultHandler;\r\n    const { headless } = params;\r\n\r\n    try {\r\n      if (Utils.isDesktop()) {\r\n        BEAM = await Utils.createDesktopAPI((...args) => Utils.handleApiResult(...args));\r\n      }\r\n\r\n      if (Utils.isWeb()) {\r\n        const apiver = params.api_version || 'current';\r\n        const apivermin = params.min_api_version || '';\r\n        const { appname } = params;\r\n\r\n        if (!Utils.isChrome()) {\r\n          Utils.showChromeDownload();\r\n          return false;\r\n        }\r\n\r\n        if (headless) {\r\n          Utils.showLoading({\r\n            headless: true,\r\n            connecting: false,\r\n          });\r\n          BEAM = await Utils.createHeadlessAPI(\r\n            apiver, apivermin, appname,\r\n            (...args) => Utils.handleApiResult(...args),\r\n          );\r\n        } else {\r\n          Utils.showLoading({\r\n            headless: false,\r\n            connecting: true,\r\n          });\r\n          BEAM = await Utils.createWebAPI(\r\n            apiver, apivermin, appname,\r\n            (...args) => Utils.handleApiResult(...args),\r\n          );\r\n        }\r\n      }\r\n\r\n      if (Utils.isMobile()) {\r\n        console.log('Mobile');\r\n        try {\r\n          BEAM = await Utils.createMobileAPI((...args) => Utils.handleApiResult(...args));\r\n        } catch (e) {\r\n          Utils.showMobileStoresLinks();\r\n          return false;\r\n        }\r\n      }\r\n\r\n      const styles = Utils.getStyles();\r\n      Utils.applyStyles(styles);\r\n      Utils.hideLoading();\r\n\r\n      if (!BEAM) {\r\n        return initcback('Failed to create BEAM API');\r\n      }\r\n\r\n      return initcback(null);\r\n    } catch (err) {\r\n      return initcback(err);\r\n    }\r\n  }\r\n\r\n  static getStyles() {\r\n    if (BEAM && BEAM.styles) {\r\n      // TODO: проборосить стили из мобайла и экстеншена\r\n      return BEAM.styles;\r\n    }\r\n\r\n    return {\r\n      appsGradientOffset: -174,\r\n      appsGradientTop: 56,\r\n      content_main: '#ffffff',\r\n      background_main_top: '#035b8f',\r\n      background_main: '#042548',\r\n      background_popup: '#00446c',\r\n      validator_error: '#ff625c',\r\n    };\r\n  }\r\n\r\n  static applyStyles(style) {\r\n    if (Utils.isMobile()) {\r\n      document.body.classList.add('mobile');\r\n    }\r\n\r\n    if (Utils.isWeb()) {\r\n      document.body.classList.add('web');\r\n    }\r\n\r\n    if (Utils.isCompact()) {\r\n      document.body.classList.add('compact');\r\n    }\r\n  }\r\n\r\n  //\r\n  // Convenience functions\r\n  //\r\n  static reload() {\r\n    window.location.reload();\r\n  }\r\n\r\n  static async injectScript(url) {\r\n    return new Promise((resolve, reject) => {\r\n      const js = document.createElement('script');\r\n      js.type = 'text/javascript';\r\n      js.async = true;\r\n      js.src = url;\r\n      js.onload = () => resolve();\r\n      js.onerror = (err) => reject(err);\r\n      document.getElementsByTagName('head')[0].appendChild(js);\r\n    });\r\n  }\r\n\r\n  static hex2rgba = (hex, alpha = 1) => {\r\n    const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\r\n    return `rgba(${r},${g},${b},${alpha})`;\r\n  };\r\n\r\n  static getById = (id) => document.getElementById(id);\r\n\r\n  static setText(id, text) {\r\n    Utils.getById(id).innerText = text;\r\n  }\r\n\r\n  static show(id) {\r\n    Utils.getById(id).classList.remove('hidden');\r\n  }\r\n\r\n  static hide(id) {\r\n    Utils.getById(id).classList.add('hidden');\r\n  }\r\n\r\n  static downloadAsync(url, type) {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState !== XMLHttpRequest.DONE) {\r\n          return;\r\n        }\r\n\r\n        if (xhr.status === 200) {\r\n          if (type) {\r\n            return resolve(xhr.response);\r\n          }\r\n\r\n          const buffer = xhr.response;\r\n          const byteArray = new Uint8Array(buffer);\r\n          const array = Array.from(byteArray);\r\n\r\n          if (array && array.length) {\r\n            return resolve(array);\r\n          }\r\n\r\n          return reject(new Error(`Empty data for ${url}`));\r\n        }\r\n\r\n        const errMsg = `Code ${xhr.status} for ${url}`;\r\n        reject(new Error(errMsg));\r\n      };\r\n\r\n      xhr.open('GET', url, true);\r\n      xhr.responseType = type || 'arraybuffer';\r\n      xhr.send(null);\r\n    });\r\n  }\r\n\r\n  static handleString(next) {\r\n    let result = true;\r\n    const regex = new RegExp(/^-?\\d+(\\.\\d*)?$/g);\r\n    const floatValue = parseFloat(next);\r\n    const afterDot = next.indexOf('.') > 0 ? next.substring(next.indexOf('.') + 1) : '0';\r\n    if ((next && !String(next).match(regex))\r\n        || (String(next).length > 1 && String(next)[0] === '0' && next.indexOf('.') < 0)\r\n        || (parseInt(afterDot, 10) === 0 && afterDot.length > 7)\r\n        || (afterDot.length > 8)\r\n        || (floatValue === 0 && next.length > 1 && next[1] !== '.')\r\n        || (floatValue < 1 && next.length > 10)\r\n        || (floatValue > 0 && (floatValue < MIN_AMOUNT || floatValue > MAX_AMOUNT))) {\r\n      result = false;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static showLoading({\r\n    headless, connecting, onCancel, onReconnect,\r\n  }) {\r\n    const styles = Utils.getStyles();\r\n    Utils.applyStyles(styles);\r\n\r\n    const topColor = [styles.appsGradientOffset, 'px,'].join('');\r\n    const mainColor = [styles.appsGradientTop, 'px,'].join('');\r\n\r\n    const bg = document.createElement('div');\r\n    bg.style.width = '100%';\r\n    bg.style.height = '100%';\r\n    bg.style.color = '#fff';\r\n    bg.id = 'dapp-loader';\r\n    bg.style.position = 'absolute';\r\n    if (headless && connecting) {\r\n      bg.style.top = '0';\r\n      bg.style.left = '0';\r\n      bg.style.position = 'fixed';\r\n      bg.addEventListener('click', (ev) => {\r\n        ev.stopPropagation();\r\n        if (ev.target.id === 'dapp-loader') {\r\n          onCancel();\r\n        }\r\n      });\r\n    } else {\r\n      bg.style.backgroundImage = [\r\n        'linear-gradient(to bottom,',\r\n        styles.background_main_top, topColor,\r\n        styles.background_main, mainColor,\r\n        styles.background_main,\r\n      ].join(' ');\r\n    }\r\n    const loadContainer = document.createElement('div');\r\n    loadContainer.id = 'dapp-loading';\r\n\r\n    loadContainer.style.textAlign = 'center';\r\n    loadContainer.style.margin = '50px auto 0 auto';\r\n    loadContainer.style.width = '585px';\r\n    loadContainer.style.padding = '5%';\r\n    loadContainer.style.borderRadius = '10px';\r\n\r\n    let titleElem = null;\r\n    let subtitle = null;\r\n\r\n    if (connecting) {\r\n      titleElem = document.createElement('h3');\r\n      titleElem.innerText = 'Connecting to BEAM Web Wallet.';\r\n      subtitle = document.createElement('p');\r\n      subtitle.innerText = ['To use ', InitParams.appname, ' you should have BEAM Web Wallet installed and allow connection.'].join('');\r\n\r\n      if (headless) {\r\n        loadContainer.style.backgroundColor = 'rgba(3, 91, 133, 0.95)';\r\n        const container = document.getElementById('container');\r\n        if (container) {\r\n          container.style.filter = 'blur(3px)';\r\n        }\r\n      } else {\r\n        loadContainer.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';\r\n      }\r\n    } else {\r\n      loadContainer.style.backgroundColor = 'transparent';\r\n\r\n      titleElem = document.createElement('div');\r\n      titleElem.style.fontSize = '25px';\r\n      titleElem.style.fontWeight = '400';\r\n      titleElem.innerText = [InitParams.appname, 'is loading'].join(' ');\r\n      subtitle = document.createElement('p');\r\n      subtitle.innerText = 'Please wait...';\r\n    }\r\n\r\n    loadContainer.appendChild(titleElem);\r\n    loadContainer.appendChild(subtitle);\r\n\r\n    if (connecting) {\r\n      const reconnectButton = document.createElement('button');\r\n      reconnectButton.innerText = 'Try to connect again';\r\n      reconnectButton.style.height = '44px';\r\n      reconnectButton.style.padding = '13px 30px';\r\n      reconnectButton.style.borderRadius = '50px';\r\n      reconnectButton.style.border = 'none';\r\n      reconnectButton.style.color = '#fff';\r\n      reconnectButton.style.cursor = 'pointer';\r\n      reconnectButton.style.fontWeight = 'bold';\r\n      reconnectButton.style.fontSize = '14px';\r\n      reconnectButton.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\r\n\r\n      reconnectButton.addEventListener('mouseover', () => {\r\n        reconnectButton.style.boxShadow = '0 0 8px white';\r\n      }, false);\r\n\r\n      reconnectButton.addEventListener('mouseout', () => {\r\n        reconnectButton.style.boxShadow = 'none';\r\n      }, false);\r\n\r\n      reconnectButton.addEventListener('click', onReconnect);\r\n\r\n      const installButton = document.createElement('button');\r\n      installButton.innerText = 'Install BEAM Web Wallet';\r\n      installButton.style.height = '44px';\r\n      installButton.style.padding = '13px 30px';\r\n      installButton.style.borderRadius = '50px';\r\n      installButton.style.border = 'none';\r\n      installButton.style.color = '#042548';\r\n      installButton.style.cursor = 'pointer';\r\n      installButton.style.fontWeight = 'bold';\r\n      installButton.style.fontSize = '14px';\r\n      installButton.style.backgroundColor = '#00f6d2';\r\n      installButton.addEventListener('click', () => {\r\n        window.open('https://chrome.google.com/webstore/detail/beam-web-wallet/ilhaljfiglknggcoegeknjghdgampffk',\r\n          '_blank');\r\n      });\r\n\r\n      installButton.addEventListener('mouseover', () => {\r\n        installButton.style.boxShadow = '0 0 8px white';\r\n      }, false);\r\n      installButton.addEventListener('mouseout', () => {\r\n        installButton.style.boxShadow = 'none';\r\n      }, false);\r\n      installButton.style.marginLeft = '30px';\r\n\r\n      const controlsArea = document.createElement('div');\r\n      controlsArea.style.marginTop = '50px';\r\n\r\n      loadContainer.appendChild(controlsArea);\r\n      controlsArea.appendChild(reconnectButton);\r\n      controlsArea.appendChild(installButton);\r\n    }\r\n\r\n    bg.appendChild(loadContainer);\r\n\r\n    document.body.appendChild(bg);\r\n  }\r\n\r\n  static showChromeDownload() {\r\n    const styles = Utils.getStyles();\r\n    Utils.applyStyles(styles);\r\n    const topColor = [styles.appsGradientOffset, 'px,'].join('');\r\n    const mainColor = [styles.appsGradientTop, 'px,'].join('');\r\n\r\n    const bg = document.createElement('div');\r\n    bg.style.width = '100%';\r\n    bg.style.height = '100%';\r\n    bg.style.color = '#fff';\r\n    bg.id = 'chrome-download';\r\n    bg.style.position = 'absolute';\r\n    bg.style.textAlign = 'center';\r\n    bg.style.backgroundImage = [\r\n      'linear-gradient(to bottom,',\r\n      styles.background_main_top, topColor,\r\n      styles.background_main, mainColor,\r\n      styles.background_main,\r\n    ].join(' ');\r\n\r\n    const notSupp = document.createElement('p');\r\n    notSupp.innerText = 'Your browser is not supported';\r\n    notSupp.style.color = '#fff';\r\n    notSupp.style.fontWeight = 'bold';\r\n    notSupp.style.fontSize = '18px';\r\n    notSupp.style.marginTop = '200px';\r\n    const download = document.createElement('p');\r\n    download.innerText = 'Download any Chromium-based browser';\r\n    download.style.cursor = 'pointer';\r\n    download.style.color = '#00f6d2';\r\n\r\n    download.addEventListener('click', () => {\r\n      window.open('https://download-chromium.appspot.com/',\r\n        '_blank');\r\n    });\r\n\r\n    bg.appendChild(notSupp);\r\n    bg.appendChild(download);\r\n\r\n    document.body.appendChild(bg);\r\n  }\r\n\r\n  static showMobileStoresLinks() {\r\n    const styles = Utils.getStyles();\r\n    Utils.applyStyles(styles);\r\n    const topColor = [styles.appsGradientOffset, 'px,'].join('');\r\n    const mainColor = [styles.appsGradientTop, 'px,'].join('');\r\n\r\n    const bg = document.createElement('div');\r\n    bg.style.width = '100%';\r\n    bg.style.height = '100%';\r\n    bg.style.color = '#fff';\r\n    bg.id = 'chrome-download';\r\n    bg.style.position = 'absolute';\r\n    bg.style.textAlign = 'center';\r\n    bg.style.backgroundImage = [\r\n      'linear-gradient(to bottom,',\r\n      styles.background_main_top, topColor,\r\n      styles.background_main, mainColor,\r\n      styles.background_main,\r\n    ].join(' ');\r\n\r\n    const downloadLink = document.createElement('p');\r\n    downloadLink.innerHTML = `To use ${InitParams.appname}<br>please download BEAM wallet`;\r\n    downloadLink.style.marginTop = '100px';\r\n    downloadLink.style.fontSize = '20px';\r\n    downloadLink.style.color = '#00f6d2';\r\n    downloadLink.addEventListener('click', () => {\r\n      Utils.isAndroid()\r\n        ? window.open('https://play.google.com/store/apps/details?id=com.mw.beam.beamwallet.mainnet',\r\n          '_blank')\r\n        : window.open('https://apps.apple.com/us/app/beam-privacy-wallet/id1459842353?ls=1',\r\n          '_blank');\r\n    });\r\n\r\n    bg.appendChild(downloadLink);\r\n    document.body.appendChild(bg);\r\n  }\r\n\r\n  static hideLoading() {\r\n    const loader = document.getElementById('dapp-loader');\r\n    if (loader) {\r\n      loader.parentNode.removeChild(loader);\r\n    }\r\n\r\n    const container = document.getElementById('container');\r\n    if (container) {\r\n      container.style.filter = 'none';\r\n    }\r\n  }\r\n\r\n  static formateValue(value) {\r\n    if (value > 0) {\r\n      return parseFloat(value.toFixed(2)).toString();\r\n    }\r\n    return value;\r\n  }\r\n\r\n  static numberWithCommas(x) {\r\n    if (x > 0) {\r\n      return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n    }\r\n    return x;\r\n  }\r\n\r\n  /*\r\n  static getRateStr(value, rate) {\r\n    const rateVal = Utils.formateValue(new Big(value).times(rate))\r\n    return (rate > 0 && value > 0\r\n      ? (rateVal > 0.1 ? (Utils.numberWithCommas(rateVal) + ' USD') : '< 1 cent')\r\n      : '0 USD')\r\n  }\r\n  */\r\n\r\n  static ensureField(obj, name, type) {\r\n    if (obj[name] == undefined) {\r\n      throw new Error(`No '${name}' field on object`);\r\n    }\r\n\r\n    if (type == 'array') {\r\n      if (!Array.isArray(obj[name])) {\r\n        throw new Error(`${name} is expected to be an array`);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (type) {\r\n      const tof = typeof obj[name];\r\n      if (tof !== type) {\r\n        throw new Error(`Bad type '${tof}' for '${name}'. '${type}' expected.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  static isUserCancelled(err) {\r\n    return err.error && err.error.code == -32021;\r\n  }\r\n\r\n  static formatJSON(obj) {\r\n    const res = JSON.stringify(obj, null, 2);\r\n    return res == '{}' ? obj.toString() : res;\r\n  }\r\n\r\n  static formatAmountFixed(amount, fixed) {\r\n    if (amount == 0) return '0';\r\n    const str = (amount / 100000000).toFixed(fixed);\r\n    if (parseFloat(str) == 0) {\r\n      let res = '< 0.';\r\n      for (let i = 0; i < fixed - 1; ++i) {\r\n        res += '0';\r\n      }\r\n      res += '1';\r\n      return res;\r\n    }\r\n    return str.replace(/([0-9]+(\\.[0-9]+[1-9])?)(\\.?0+$)/, '$1');\r\n  }\r\n\r\n  static formatAmount3(amount) {\r\n    amount /= 100000000;\r\n    const fixedNum = amount.toFixed(3);\r\n\r\n    if (amount == 0) {\r\n      return '0';\r\n    }\r\n\r\n    if (amount < 0.01) {\r\n      return '< 0.01';\r\n    }\r\n\r\n    if (amount >= 0.01 && fixedNum < 1000) {\r\n      return +amount.toFixed(2);\r\n    }\r\n\r\n    if (fixedNum >= 1000 && fixedNum < 1000000) {\r\n      const head = fixedNum.slice(0, -7);\r\n      const tail = fixedNum.slice(-7, -5);\r\n      const n = +(`${head}.${tail}`);\r\n      return `${n} k`;\r\n    }\r\n\r\n    if (fixedNum >= 1000000 && fixedNum < 1000000000) {\r\n      const head = fixedNum.slice(0, -10);\r\n      const tail = fixedNum.slice(-10, -8);\r\n      const n = +(`${head}.${tail}`);\r\n      return `${n} m`;\r\n    }\r\n\r\n    if (fixedNum >= 1000000000) {\r\n      const head = fixedNum.slice(0, -13);\r\n      const tail = fixedNum.slice(-13, -11);\r\n      const n = +(`${head}.${tail}`);\r\n      return `${n} b`;\r\n    }\r\n\r\n    return 'error';\r\n  }\r\n\r\n  static formatHeight(height) {\r\n    return new Intl.NumberFormat().format(height);\r\n  }\r\n\r\n  static formatBytes(bytes, decimals = 2) {\r\n    if (bytes === 0) return '0 Bytes';\r\n\r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\r\n  }\r\n\r\n  static clearAssign(oldobj, newobj) {\r\n    for (const key in oldobj) {\r\n      // eslint-disable-next-line no-prototype-builtins\r\n      if (oldobj.hasOwnProperty(key)) {\r\n        delete oldobj[key];\r\n      }\r\n    }\r\n    for (const key in newobj) {\r\n      // eslint-disable-next-line no-prototype-builtins\r\n      if (newobj.hasOwnProperty(key)) {\r\n        oldobj[key] = newobj[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  static copyText(text) {\r\n    const textArea = document.createElement('textarea');\r\n    textArea.style.position = 'fixed';\r\n    textArea.value = text;\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();\r\n\r\n    try {\r\n      return document.execCommand('copy');\r\n    } finally {\r\n      document.body.removeChild(textArea);\r\n    }\r\n  }\r\n\r\n  static waitAsync(msecs) {\r\n    return new Promise((resolve) => setTimeout(() => resolve(), msecs));\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/core/utils.js b/src/app/core/utils.js
--- a/src/app/core/utils.js	(revision 7cbe6e54d628e4a3028e0fa31d5c0e21f3e5a4ca)
+++ b/src/app/core/utils.js	(date 1686911893620)
@@ -10,6 +10,7 @@
 // const headlessNode = 'eu-node02.dappnet.beam.mw:8200';
 const headlessNode = 'eu-node01.mainnet.beam.mw:8200';
 let InitParams;
+const mediaQuery = window.matchMedia('(max-width: 480px)');
 
 export default class Utils {
   static is_desktop = undefined;
@@ -127,7 +128,7 @@
 
     const WasmModule = await BeamModule(); // eslint-disable-line no-undef
     const { WasmWalletClient } = WasmModule;
-    const client = new WasmWalletClient(headlessNode, WasmModule.Network.mainnet);
+      const client = new WasmWalletClient(headlessNode, WasmModule.Network.mainnet);
     client.startWallet();
 
     client.subscribe((response) => {
@@ -260,7 +261,7 @@
     }
 
     if (Utils.isWeb()) {
-      return BEAM.api.callWalletApi(callid, method, params);
+      return BEAM.api.callWalletApi(callid, method, params, InitParams["appname"]);
     }
 
     if (Utils.isMobile()) {
@@ -791,6 +792,84 @@
     bg.appendChild(downloadLink);
     document.body.appendChild(bg);
   }
+  static showInformStrip() {
+    const wrapperStrip = document.createElement('div');
+    if (mediaQuery.matches) {
+      wrapperStrip.style.flexDirection = 'column';
+    } else {
+      wrapperStrip.style.flexDirection = 'row';
+    }
+    wrapperStrip.style.width = '100%';
+    wrapperStrip.style.minHeight = '3rem';
+    wrapperStrip.style.backgroundColor = 'rgba(3,91,133,0.95)';
+    wrapperStrip.style.display = 'flex';
+    wrapperStrip.style.justifyContent = 'space-evenly';
+    wrapperStrip.style.alignItems = 'center';
+    wrapperStrip.style.padding = '0.625rem';
+    const text = document.createElement('span');
+    text.innerText = `To use ${InitParams.appname} you should have BEAM Web Wallet installed and allow connection.`;
+    if (mediaQuery.matches) {
+      text.style.textAlign = 'center';
+    }
+    const wrapperButton = document.createElement('div');
+    wrapperButton.style.width = '100%';
+    wrapperButton.style.maxWidth = '18.75rem';
+    wrapperButton.style.display = 'flex';
+    const reconnectButton = document.createElement('button');
+    reconnectButton.innerText = 'CONNECT';
+    reconnectButton.style.height = '44px';
+    // reconnectButton.style.padding = '13px 30px';
+    reconnectButton.style.borderRadius = '19px';
+    reconnectButton.style.border = 'none';
+    reconnectButton.style.padding = '13px 30px';
+    reconnectButton.style.color = '#042548';
+    reconnectButton.style.cursor = 'pointer';
+    reconnectButton.style.fontWeight = '700';
+    reconnectButton.style.fontSize = '14px';
+    reconnectButton.style.backgroundColor = '#00f6d2';
+    reconnectButton.style.textAlign = 'center';
+
+    reconnectButton.addEventListener('mouseover', () => {
+      reconnectButton.style.boxShadow = '0 0 8px white';
+    }, false);
+
+    reconnectButton.addEventListener('mouseout', () => {
+      reconnectButton.style.boxShadow = 'none';
+    }, false);
+
+    reconnectButton.addEventListener('click', Utils.switchToWebAPI);
+
+    const installButton = document.createElement('button');
+    installButton.innerText = 'INSTALL';
+    installButton.style.width = '100%';
+    installButton.style.height = '44px';
+    installButton.style.padding = '13px 30px';
+    installButton.style.borderRadius = '50px';
+    installButton.style.border = 'none';
+    installButton.style.color = '#042548';
+    installButton.style.cursor = 'pointer';
+    installButton.style.fontWeight = '700';
+    installButton.style.fontSize = '14px';
+    installButton.style.backgroundColor = '#00f6d2';
+    installButton.addEventListener('click', () => {
+      window.open('https://chrome.google.com/webstore/detail/beam-web-wallet/ilhaljfiglknggcoegeknjghdgampffk',
+          '_blank');
+    });
+
+    installButton.addEventListener('mouseover', () => {
+      installButton.style.boxShadow = '0 0 8px white';
+    }, false);
+    installButton.addEventListener('mouseout', () => {
+      installButton.style.boxShadow = 'none';
+    }, false);
+    installButton.style.marginLeft = '30px';
+
+    wrapperStrip.appendChild(text);
+    wrapperButton.appendChild(reconnectButton);
+    wrapperButton.appendChild(installButton);
+    wrapperStrip.appendChild((wrapperButton));
+    document.body.prepend(wrapperStrip);
+  }
 
   static hideLoading() {
     const loader = document.getElementById('dapp-loader');
Index: src/app/shared/components/AlertWallet.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useMemo, useState } from 'react';\r\nimport Utils from '@core/utils.js';\r\nimport { styled } from '@linaria/react';\r\nimport { Button } from '@app/shared/components/index';\r\nimport { ULR_WEB_WALLET } from '@app/shared/constants';\r\nimport { onSwitchToApi } from '@core/appUtils';\r\n\r\nconst Wrapper = styled.div`\r\nwidth: 100%;\r\n  min-height: 50px;\r\n  background: rgba(3, 91, 133, 0.95);\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  padding: 10px;\r\n  @media (max-width: 480px) {\r\n    flex-direction: column;\r\n    span{\r\n      text-align: center;\r\n    };\r\n  }\r\n`;\r\nconst WrapperButton = styled.div`\r\n  width: 100%;\r\n  max-width: 300px;\r\n  display: flex;\r\n  button:not(:last-child) {\r\n    margin-right: 0.5rem}\r\n`;\r\n\r\nconst onInstall = () => {\r\n  const newWindow = window.open(ULR_WEB_WALLET, '_blank', 'noopener,noreferrer');\r\n  if (newWindow) newWindow.opener = null;\r\n};\r\nconst onConnect = async () => {\r\n  await onSwitchToApi();\r\n};\r\nconst AlertWallet = () => (\r\n  <>\r\n    <Wrapper>\r\n      <span>To use DEX you should have BEAM Web Wallet installed and allow connection.</span>\r\n      <WrapperButton>\r\n        <Button onClick={onConnect}>CONNECT</Button>\r\n        <Button onClick={onInstall}>INSTALL</Button>\r\n      </WrapperButton>\r\n    </Wrapper>\r\n  </>\r\n\r\n);\r\n\r\nexport default AlertWallet;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/shared/components/AlertWallet.tsx b/src/app/shared/components/AlertWallet.tsx
--- a/src/app/shared/components/AlertWallet.tsx	(revision 7cbe6e54d628e4a3028e0fa31d5c0e21f3e5a4ca)
+++ b/src/app/shared/components/AlertWallet.tsx	(date 1686901910711)
@@ -6,7 +6,7 @@
 import { onSwitchToApi } from '@core/appUtils';
 
 const Wrapper = styled.div`
-width: 100%;
+  width: 100%;
   min-height: 50px;
   background: rgba(3, 91, 133, 0.95);
   display: flex;
